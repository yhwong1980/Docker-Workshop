 
---
kind: Namespace
apiVersion: v1

metadata:
   name: myweatherns
   labels:
      app.kubernetes.io/name: myweatherns
      app.kubernetes.io/version: "v1"
---
kind: Secret
apiVersion: v1
metadata:
    name: myweather-secret
    namespace: myweatherns
    labels:
        app: myweather-secret

data:
    myweather_password: ODExZmE3NmY3OWUwZmYwODI5MjQxMDkwMTk5YjcwM2M=
---
kind: Deployment
apiVersion: apps/v1

metadata:
   name: weather-deploy
   namespace: myweatherns
   labels:
      app.kubernetes.io/name: weather-deploy
      app.kubernetes.io/version: "v1"
spec:
   replicas: 2
   selector:
      matchLabels:
         app.kubernetes.io/name: weather-pod
   strategy:
      type: RollingUpdate
      rollingupdate:
         maxSurge: 1
         maxUnavailable: 1
   template:
      metadata:
         name: weather-pod
         namespace: myweatherns
         labels:
            app.kubernetes.io/name: weather-pod
            app.kubernetes.io/version: "v1"
      spec:
         containers:
         - name: weather
           image: stackupiss/weather:v1
           imagePullPolicy: Always
           ports:
           - name: weather-port
             containerPort: 3000
           env:
           - name: APP_ID
             valueFrom:
               secretKeyRef:
                  name: myweather-secret
                  key: myweather_password
           readinessProbe:
              httpGet:
                 path: /ready
                 port: weather-port
           livenessProbe:
              httpGet:
                 path: /health
                 port: weather-port

---
kind: Service
apiVersion: v1

metadata:
   name: weather-svc
   namespace: myweatherns
   labels:
      app.kubernetes.io/name: weather-svc
      app.kubernetes.io/version: "v1"

spec:
   type: ClusterIP
   selector:
      app.kubernetes.io/name: weather-pod

   ports:
   - port: 80
     targetPort: weather-port